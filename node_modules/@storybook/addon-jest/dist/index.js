"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withTests = void 0;

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _utilDeprecate = _interopRequireDefault(require("util-deprecate"));

var findTestResults = function findTestResults(testFiles, jestTestResults, jestTestFilesExt) {
  return Object.values(testFiles).map(function (name) {
    if (jestTestResults && jestTestResults.testResults) {
      return {
        name: name,
        result: jestTestResults.testResults.find(function (t) {
          return new RegExp("".concat(name).concat(jestTestFilesExt)).test(t.name);
        })
      };
    }

    return {
      name: name
    };
  });
};

var emitAddTests = function emitAddTests(_ref) {
  var kind = _ref.kind,
      story = _ref.story,
      testFiles = _ref.testFiles,
      options = _ref.options;

  _addons.default.getChannel().emit('storybook/tests/add_tests', {
    kind: kind,
    storyName: story,
    tests: findTestResults(testFiles, options.results, options.filesExt)
  });
};

var withTests = function withTests(userOptions) {
  var defaultOptions = {
    filesExt: '((\\.specs?)|(\\.tests?))?(\\.js)?$'
  };
  var options = Object.assign({}, defaultOptions, userOptions);
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof args[0] === 'string') {
      return (0, _utilDeprecate.default)(function (story, _ref2) {
        var kind = _ref2.kind;
        emitAddTests({
          kind: kind,
          story: story,
          testFiles: args,
          options: options
        });
        return story();
      }, 'Passing component filenames to the `@storybook/addon-jest` via `withTests` is deprecated. Instead, use the `jest` story parameter');
    }

    var story = args[0],
        _args$ = args[1],
        kind = _args$.kind,
        testFiles = _args$.parameters.jest;

    if (testFiles && !testFiles.disable) {
      emitAddTests({
        kind: kind,
        story: story,
        testFiles: testFiles,
        options: options
      });
    }

    return story();
  };
};

exports.withTests = withTests;