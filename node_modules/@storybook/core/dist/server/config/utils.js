"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadEnv = loadEnv;
exports.getEntries = getEntries;
exports.getBabelRuntimePath = exports.nodePaths = exports.nodeModulesPaths = exports.excludePaths = exports.includePaths = void 0;

var _path = _interopRequireDefault(require("path"));

var _nodeLogger = require("@storybook/node-logger");

var _interpretFiles = require("./interpret-files");

var includePaths = [_path.default.resolve('./')];
exports.includePaths = includePaths;
var excludePaths = [_path.default.resolve('node_modules')];
exports.excludePaths = excludePaths;

var nodeModulesPaths = _path.default.resolve('./node_modules');

exports.nodeModulesPaths = nodeModulesPaths;
var nodePaths = (process.env.NODE_PATH || '').split(process.platform === 'win32' ? ';' : ':').filter(Boolean).map(function (p) {
  return _path.default.resolve('./', p);
}); // Load environment variables starts with STORYBOOK_ to the client side.

exports.nodePaths = nodePaths;

function loadEnv() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultNodeEnv = options.production ? 'production' : 'development';
  var env = {
    NODE_ENV: JSON.stringify(process.env.NODE_ENV || defaultNodeEnv),
    // This is to support CRA's public folder feature.
    // In production we set this to dot(.) to allow the browser to access these assests
    // even when deployed inside a subpath. (like in GitHub pages)
    // In development this is just empty as we always serves from the root.
    PUBLIC_URL: JSON.stringify(options.production ? '.' : '')
  };
  Object.keys(process.env).filter(function (name) {
    return /^STORYBOOK_/.test(name);
  }).forEach(function (name) {
    env[name] = JSON.stringify(process.env[name]);
  });
  return {
    'process.env': env
  };
}

function getEntries(configDir) {
  var iframe = [require.resolve('./polyfills'), require.resolve('./globals')];
  var manager = [require.resolve('./polyfills'), require.resolve('../../client/manager')]; // Check whether a config.{ext} file exists inside the storybook
  // config directory and throw an error if it's not.

  var storybookConfigPath = (0, _interpretFiles.getInterpretedFile)(_path.default.resolve(configDir, 'config'));

  if (!storybookConfigPath) {
    throw new Error("=> Create a storybook config file in \"".concat(configDir, "/config.{ext}\"."));
  }

  iframe.push(require.resolve(storybookConfigPath)); // Check whether addons.{ext} file exists inside the storybook.

  var storybookCustomAddonsPath = (0, _interpretFiles.getInterpretedFile)(_path.default.resolve(configDir, 'addons'));

  if (storybookCustomAddonsPath) {
    _nodeLogger.logger.info('=> Loading custom addons config.');

    manager.unshift(storybookCustomAddonsPath);
  }

  return {
    iframe: iframe,
    manager: manager
  };
}

var getBabelRuntimePath = function getBabelRuntimePath() {
  var pkgJsonPath = require.resolve('@babel/runtime/package.json');

  return _path.default.dirname(pkgJsonPath);
};

exports.getBabelRuntimePath = getBabelRuntimePath;