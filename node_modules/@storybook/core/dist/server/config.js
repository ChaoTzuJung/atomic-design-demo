"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _findCacheDir = _interopRequireDefault(require("find-cache-dir"));

var _nodeLogger = require("@storybook/node-logger");

var _webpack = require("./config/defaults/webpack.config");

var _babel = _interopRequireDefault(require("./config/babel"));

var _loadCustomBabelConfig = _interopRequireDefault(require("./loadCustomBabelConfig"));

var _loadCustomWebpackConfig = _interopRequireDefault(require("./loadCustomWebpackConfig"));

var _mergeConfigs = _interopRequireDefault(require("./mergeConfigs"));

var noopWrapper = function noopWrapper(config) {
  return config;
};

function getBabelConfig(_ref) {
  var configDir = _ref.configDir,
      _ref$defaultBabelConf = _ref.defaultBabelConfig,
      defaultBabelConfig = _ref$defaultBabelConf === void 0 ? _babel.default : _ref$defaultBabelConf,
      _ref$wrapDefaultBabel = _ref.wrapDefaultBabelConfig,
      wrapDefaultBabelConfig = _ref$wrapDefaultBabel === void 0 ? noopWrapper : _ref$wrapDefaultBabel,
      _ref$wrapBabelConfig = _ref.wrapBabelConfig,
      wrapBabelConfig = _ref$wrapBabelConfig === void 0 ? noopWrapper : _ref$wrapBabelConfig;
  var defaultConfig = wrapDefaultBabelConfig(defaultBabelConfig);
  return wrapBabelConfig((0, _loadCustomBabelConfig.default)(configDir, defaultConfig));
}

function informAboutCustomConfig(defaultConfigName) {
  if (!defaultConfigName) {
    _nodeLogger.logger.info('=> Using default webpack setup.');

    return;
  }

  _nodeLogger.logger.info("=> Using default webpack setup based on \"".concat(defaultConfigName, "\"."));
} // `baseConfig` is a webpack configuration bundled with storybook.
// Storybook will look in the `configDir` directory
// (inside working directory) if a config path is not provided.


var _default = function _default(options) {
  var configType = options.configType,
      getBaseConfig = options.getBaseConfig,
      configDir = options.configDir,
      defaultConfigName = options.defaultConfigName,
      _options$wrapInitialC = options.wrapInitialConfig,
      wrapInitialConfig = _options$wrapInitialC === void 0 ? noopWrapper : _options$wrapInitialC,
      _options$wrapBasicCon = options.wrapBasicConfig,
      wrapBasicConfig = _options$wrapBasicCon === void 0 ? noopWrapper : _options$wrapBasicCon,
      _options$wrapDefaultC = options.wrapDefaultConfig,
      wrapDefaultConfig = _options$wrapDefaultC === void 0 ? noopWrapper : _options$wrapDefaultC;
  var babelOptions = (0, _objectSpread2.default)({
    // This is a feature of `babel-loader` for webpack (not Babel itself).
    // It enables a cache directory for faster-rebuilds
    // `find-cache-dir` will create the cache directory under the node_modules directory.
    cacheDirectory: (0, _findCacheDir.default)({
      name: 'react-storybook'
    })
  }, getBabelConfig(options));
  var baseConfig = getBaseConfig((0, _objectSpread2.default)({}, options, {
    babelOptions: babelOptions
  }));
  var config = wrapInitialConfig(baseConfig, configDir);
  var defaultConfig = wrapDefaultConfig((0, _webpack.createDefaultWebpackConfig)(config)); // Check whether user has a custom webpack config file and
  // return the (extended) base configuration if it's not available.

  var customConfig = (0, _loadCustomWebpackConfig.default)(configDir);

  if (customConfig === null) {
    informAboutCustomConfig(defaultConfigName);
    return defaultConfig;
  }

  if (typeof customConfig === 'function') {
    _nodeLogger.logger.info('=> Loading custom webpack config (full-control mode).');

    return customConfig(wrapBasicConfig(config), configType, defaultConfig);
  }

  _nodeLogger.logger.info('=> Loading custom webpack config (extending mode).');

  return (0, _mergeConfigs.default)(config, customConfig);
};

exports.default = _default;